@article{mcbride2008functional,
  title={Functional Pearl: Applicative programming with effects},
  author={McBride, Conor and Paterson, Ross},
  journal={Journal of functional programming},
  volume={18},
  number={1},
  pages={1--13},
  year={2008},
  publisher={Cambridge Univ Press}
}

@article{hansson1994logic,
  title={A logic for reasoning about time and reliability},
  author={Hansson, Hans and Jonsson, Bengt},
  journal={Formal aspects of computing},
  volume={6},
  number={5},
  pages={512--535},
  year={1994},
  publisher={Springer}
}

@inproceedings{emerson1991quantitative,
  title={Quantitative temporal reasoning},
  author={Emerson, E Allen and Mok, Aloysius K and Sistla, A Prasad and Srinivasan, Jai},
  booktitle={Computer-Aided Verification},
  pages={136--145},
  year={1991},
  organization={Springer}
}



@book{Shoham1987,
abstract = {The notions of time and change are central to the way we think about the world. Not surprisingly, both play a prominent role in artificial intelligence research, in diverse areas such as medical diagnosis, circuit debugging, naive physics, and robot planning. Reasoning About Change presents a comprehensive approach to temporal reasoning in artificial intelligence. Using techniques from temporal, nonmonotonic and epistemic logics, the author investigates issues that arise when one adopts a formal approach to temporal reasoning in artificial intelligence that is at once rigorous, efficient, and intuitive. Shoham develops a temporal logic that is based on temporal intervals rather than points in time, and presents a mathematical apparatus that simplifies and clarifies notions of nonmonotonic logic and the modal logic of knowledge. He constructs a specific logic, called Chronological Ignorance, and discusses both its practical utility and philosophical importance. In particular, he offers a new account of the concept of causation, and of its central role in commonsense reasoning.},
author = {Shoham, Yoav},
edition = {First edit},
isbn = {0262192691},
pages = {200},
publisher = {The MIT Press},
title = {{Reasoning about Change: Time and Causation from the Standpoint of Artificial Intelligence.}},
url = {http://www.amazon.com/Reasoning-About-Change-Standpoint-Intelligence/dp/0262192691},
year = {1987}
}
@article{Lee2009,
author = {Lee, Edward A},
doi = {10.1145/1506409.1506426},
file = {:Users/sam/Library/Application Support/Mendeley Desktop/Downloaded/Lee - 2009 - Computing needs time.pdf:pdf},
issn = {00010782},
journal = {Communications of the ACM},
month = may,
number = {5},
pages = {70--79},
title = {{Computing needs time}},
url = {http://portal.acm.org/citation.cfm?doid=1506409.1506426},
volume = {52},
year = {2009}
}
@article{blackwell_et_al2014,
address = {Dagstuhl, Germany},
annote = {Keywords: Live coding, Collaboration, Learning, Improvised interactive programming, Computer music, Algorithmic composition, TOPLAP},
author = {Blackwell, Alan and McLean, Alex and Noble, James and Rohrhuber, Julian},
doi = {http://dx.doi.org/10.4230/DagRep.3.9.130},
editor = {Blackwell, Alan and McLean, Alex and Noble, James and Rohrhuber, Julian},
issn = {2192-5283},
journal = {Dagstuhl Reports},
number = {9},
pages = {130--168},
publisher = {Schloss Dagstuhl--Leibniz-Zentrum fuer Informatik},
title = {{Collaboration and learning through live coding (Dagstuhl Seminar 13382)}},
url = {http://drops.dagstuhl.de/opus/volltexte/2014/4420},
volume = {3},
year = {2014}
}
@techreport{Bellingham2014,
abstract = {This paper presents an analysis, using cognitive dimensions (Green \& Blackwell, 1998), of a representative selection of user interfaces for algorithmic composition software. Cognitive dimensions are design principles for notations, user interfaces and programming language design, or from another viewpoint ‘discussion tools’ for designers (Green \& Blackwell, 1998). For the purposes of this report, algorithmic composition software is software which generates music using computer algorithms, where the algorithms may be controlled by end users (who may variously be considered as composers or performers). For example, the algorithms may be created by the end user, or the user may provide data or parameter settings to pre-existing algorithms. Other kinds of end-user manipulation are also possible. A wide variety of algorithmic composition software is considered, including visual programming languages, text- oriented programming languages, and software which requires or allows data entry by the user. The paper considers a representative, rather than comprehensive, selection of software. The analysis also draws, where appropriate, on related discussion tools drawn from Crampton Smith (Moggridge, 2006), Cooper et al. (2007) and Rogers et al. (2011). Finally, the paper reflects on the compositional representation of time as a critical dimension of composition software that is not satisfactorily addressed by cognitive dimensions, or any of the other discussion tools.},
author = {Bellingham, Matt and Holland, Simon and Mulholland, Paul},
file = {:Users/sam/Library/Containers/com.apple.mail/Data/Library/Mail Downloads/CDB07050-230A-40F3-94F0-C6011C0B7499/cd-final.pdf:pdf},
institution = {Open University Computer Science Department},
pages = {1--34},
title = {{An analysis of algorithmic composition interaction design with reference to cognitive dimensions}},
year = {2014}
}
@techreport{MSR-TR-2014-42,
abstract = {Time is of the essence when modifying state. Most programming languages expose the hardware's ability to update global state at any time, leaving the burden entirely on programmers to properly order all updates. Just as languages now manage memory to free us from meticulously allocating and freeing memory, languages should also manage time to take care of properly ordering state updates. We propose time management as a general language feature to relate various prior work but also to guide future research of this largely unexplored design space. We propose a new form of managed time, Glitch, which ensures that all updates associated with an external event appear to execute simultaneously, removing the need to order execution manually. Glitch replays code as needed to reach an appearance of simultaneous execution. To do this, all updates must be commutative and capable of being rolled back, which is ensured through built-in state constructs and runtime monitoring. While these restrictions might seem onerous, we find them acceptable for many realistic programs. Glitch retains the familiar imperative programming model as much as possible, restricting rather than replacing it. Managed time also aides in live programming that provides immediate programmer feedback on how code edits affect execution. Live programming to date has been limited to special cases like pure functions, spreadsheets, or at the top level of games and graphics. Glitch is fully live: past program executions can be replayed in an IDE, while executions are incrementally revised under arbitrary code changes.},
author = {McDirmid, Sean and Edwards, Jonathan},
file = {:Users/sam/Downloads/managedtime.pdf:pdf},
institution = {Microsoft},
title = {{Programming with Managed Time}},
year = {2014}
}
@article{Sorensen2010,
author = {Sorensen, Andrew and Gardner, Henry},
doi = {10.1145/1869459.1869526},
file = {:Users/sam/Library/Application Support/Mendeley Desktop/Downloaded/Sorensen, Gardner - 2010 - Programming With Time Cyber-physical programming with Impromptu.pdf:pdf},
journal = {Proceedings of the ACM international conference on Object Oriented Programming Systems Languages and Applications},
keywords = {concurrency,cyber-physical systems,impromptu,livecoding,time},
pages = {822--834},
title = {{Programming With Time Cyber-physical programming with Impromptu}},
url = {http://doi.acm.org/10.1145/1869459.1869526},
year = {2010}
}
@article{Honing1993,
author = {Honing, Henkjan},
doi = {10.1080/07494469300640461},
file = {:Users/sam/Library/Application Support/Mendeley Desktop/Downloaded/Honing - 1993 - Issues on the representation of time and structure in music.pdf:pdf},
issn = {0749-4467},
journal = {Contemporary Music Review},
keywords = {knowledge representation,music representation,representational systems,representations,structure,temporal},
number = {1},
pages = {221--238},
title = {{Issues on the representation of time and structure in music}},
url = {http://www.informaworld.com/openurl?genre=article\&doi=10.1080/07494469300640461\&magic=crossref||D404A21C5BB053405B1A640AFFD44AE3},
volume = {9},
year = {1993}
}
@book{Fisher2005,
editor = {Fisher, Michael David and Gabbay, Dov M. and Vila, Lluis},
publisher = {Elsevier B.V.},
title = {{Handbook of Temporal Reasoning in Artificial Intelligence}},
url = {http://books.google.co.uk/books?hl=en\&lr=\&id=Ajsvo6jWNhgC\&oi=fnd\&pg=PP2\&dq=Handbook+of+Temporal+Reasoning+in+Artificial+Intelligence\&ots=xUpZi-YHNb\&sig=Wk5A6bDLl0ooGrUbIy9obDXmp7A\#v=onepage\&q=Handbook of Temporal Reasoning in Artificial Intelligence\&f=false},
year = {2005}
}
@book{Bal2002,
author = {Bal, Mieke},
isbn = {1442690453},
pages = {432},
publisher = {University of Toronto Press},
title = {{Travelling Concepts in the Humanities: A Rough Guide}},
year = {2002}
}
@inproceedings{Aaron2013,
abstract = {Domain Specific and Functional languages provide an excellent linguistic context for exploring new forms of music notation -- not just for formalising compositions but also for live interaction workflows. This experience report describes two novel live coding systems that employ code execution to modify live sounds and music. The first of these systems, Sonic Pi, aims at teaching core computing notions to school students using live-coded music as a means of stimulating and maintaining student engagement. We describe how an emphasis on a functional style improves the ease in which core computer science concepts can be communicated to students. Secondly we describe Overtone, a functional language and live coding environment aimed towards mprofessional electronic musicians. We describe how Overtone's abstractions and architecture strongly benefit from a functional-oriented implementation. Both Sonic Pi and Overtone are freely available open-source platforms.},
address = {Boston, Massachusetts, USA},
author = {Aaron, Samuel and Blackwell, Alan F},
booktitle = {The First ACM SIGPLAN Workshop on Functional Art, Music, Modeling \& Design},
doi = {10.1145/2505341.2505346},
file = {:Users/sam/Downloads/p35-aaron.pdf:pdf},
isbn = {9781450323864},
keywords = {computational thinking,live coding,pedagogy,raspberry pi,sound synthesis},
pages = {35--46},
publisher = {ACM},
title = {{From Sonic Pi to Overtone : Creative Musical Experiences with Domain-Specific and Functional Languages}},
url = {http://doi.acm.org/10.1145/2505341.2505346},
year = {2013}
}
@article{McLean2013,
author = {McLean, Alex},
file = {:Users/sam/Downloads/xcoax2013-mclean.pdf:pdf},
journal = {xCoAx2013: Computation Communication Aesthetics and X},
keywords = {abstract,an argument is constructed,based upon a knitting,binding of analogue and,code over time,computer programming,context,digital forms in the,knitting,live coding,metaphor,of computer programming,relating patterning of wool,the relation between,this paper considers the,with the functions of},
pages = {81--88},
title = {{The Textural X}},
year = {2013}
}
@article{Shanahan1995,
author = {Shanahan, Murray},
doi = {10.1016/0004-3702(94)00036-Z},
file = {:Users/sam/Downloads/circEC.pdf:pdf},
issn = {00043702},
journal = {Artificial Intelligence},
month = sep,
number = {2},
pages = {249--284},
title = {{A circumscriptive calculus of events}},
url = {http://linkinghub.elsevier.com/retrieve/pii/000437029400036Z},
volume = {77},
year = {1995}
}

@book{bal2002travelling,
  title={Travelling concepts in the humanities: A rough guide},
  author={Bal, Mieke},
  year={2002},
  publisher={University of Toronto Press}
}

@Article{blackwell_et_al:DR:2014:4420,
author =	{Alan Blackwell and Alex McLean and James Noble and Julian Rohrhuber},
title =	{{Collaboration and learning through live coding (Dagstuhl Seminar 13382)}},
pages =	{130--168},
journal =	{Dagstuhl Reports},
ISSN =	{2192-5283},
year =	{2014},
volume =	{3},
number =	{9},
editor =	{Alan Blackwell and Alex McLean and James Noble and Julian Rohrhuber},
publisher =	{Schloss Dagstuhl--Leibniz-Zentrum fuer Informatik},
address =	{Dagstuhl, Germany},
URL =		{http://drops.dagstuhl.de/opus/volltexte/2014/4420},
URN =		{urn:nbn:de:0030-drops-44205},
doi =		{http://dx.doi.org/10.4230/DagRep.3.9.130},
annote =	{Keywords: Live coding, Collaboration, Learning, Improvised interactive programming, Computer music, Algorithmic composition, TOPLAP}
}

@article{mclean2013textural,
  title={The Textural X},
  author={McLean, Alex},
  journal={Proceedings of xCoAx2013: Computation Communication Aesthetics and X},
  pages={81--88},
  year={2013}
}

@article{sorensen2010programming,
  title={Programming with time: cyber-physical programming with impromptu},
  author={Sorensen, Andrew and Gardner, Henry},
  journal={ACM Sigplan Notices},
  volume={45},
  number={10},
  pages={822--834},
  year={2010},
  publisher={ACM}
}