Added sentence in p.2 col.1 (search for %ADDED)
Consistency "Sonic Pi 1.0" or "Sonic Pi v1.0" (or 2.0)

Reduction for 3 computations

|runTime $ (T f) >>= (\_ -> (T g) >>= (\_ -> (T h)))|


\begin{code}
runTime $
  T (\(startT, nowT) -> \vt -> 
   do  (x, vt')    <- f (startT, nowT) vt
       let q = \_ -> T (\(startT', nowT') -> \vtP -> 
                    do  (x', vt'')  <- g (startT', nowT') vtP
                        thenT'      <- getCurrentTime
                        ((\_ -> h) x) (startT', thenT') vt'')
       let (T q')  = q x
       thenT       <- getCurrentTime
       q' (startT, thenT) vt')
\end{code}

\begin{code}
runTime $
  T (\(startT, nowT) -> \vt -> 
   do  (x, vt')    <- f (startT, nowT) vt
       let q' = (\(startT', nowT') -> \vtP -> 
                  do  (x', vt'')  <- g (startT', nowT') vtP
                      thenT'      <- getCurrentTime
                      ((\_ -> h) x) (startT', thenT') vt'')
       thenT       <- getCurrentTime
       q' (startT, thenT) vt')
\end{code}

\begin{code}
runTime $
  T (\(startT, nowT) -> \vt -> 
   do  (x, vt')    <- f (startT, nowT) vt
       thenT       <- getCurrentTime
       (x', vt'')  <- g (startT, thenT) vt'
       thenT'      <- getCurrentTime
       h (startT, thenT') vt'')
\end{code}

\begin{code}
do  startT    <- getCurrentTime
    (_, vt')  <- f (startT, startT) 0
    thenT     <- getCurrentTime
    (_, vt'')<- g (startT, thenT) vt'
    thenT'    <- getCurrentTime
    (y, _)    <- h (startT, thenT') vt'')
    return y

---------------------



sleep 1
sleep 2 


sleep 3





do vT    <- getVirtualTime
   thenT <- startTime
   nowT  <- getTime
   let diffT = diffUTCTime nowT thenT
   let vT'   = vT + 1
   if (vT' < diffT) then return () else kernelSleep (vT' - diffT)
   setVirtualTime vT'
   AvT    <- getVirtualTime
   AthenT <- startTime
   AnowT  <- getTime
   let AdiffT = diffUTCTime AnowT AthenT
   let AvT'   = AvT + 2
   if (AvT' < AdiffT) then return () else kernelSleep (AvT' - AdiffT)
   setVirtualTime AvT'


do vT    <- getVirtualTime
   thenT <- startTime
   nowT  <- getTime
   let diffT = diffUTCTime nowT thenT
   let vT'   = vT + 1
   if (vT' < diffT) then return () else kernelSleep (vT' - diffT)
   AthenT <- startTime
   AnowT  <- getTime
   let AdiffT = diffUTCTime AnowT AthenT
   let AvT'   = vT' + 2
   if (AvT' < AdiffT) then return () else kernelSleep (AvT' - AdiffT)
   setVirtualTime AvT'

do vT    <- getVirtualTime
   thenT <- startTime
   nowT  <- getTime
   let diffT = diffUTCTime nowT thenT
   let vT'   = vT + 1
   if (vT' < diffT) then return () else kernelSleep (vT' - diffT)
   AnowT  <- getTime
   let AdiffT = diffUTCTime AnowT thenT
   let AvT'   = vT' + 2
   if (AvT' < AdiffT) then return () else kernelSleep (AvT' - AdiffT)
   setVirtualTime AvT'
